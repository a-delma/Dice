import "../stdlib/print.roll";

struct IntStack {
    IntStack next;
    Int value;
    Bool empty;
};

struct IntStackUtils {
    []->IntStack newIntStack;
    [IntStack, Int]->Void push;
    [IntStack]->Int pop;
};

struct IntList{
  IntStack values;
  Int size;
};

struct IntListUtils{
  [Int]->IntList newIntList;
  [IntList, Int, Int]->Void updateAt;
  [IntList, Int]->Int getAt;
};

IntStackUtils intStackUtils;
IntListUtils intListUtils;

IntStack testStack;

intStackUtils = new IntStackUtils{ 
    newIntStack : lambda ()->IntStack  {
        IntStack ret;
        ret = new IntStack{next : null, value : 0, empty : true};
        return ret;
    }, 
    push : lambda (IntStack stack, Int newValue)->Void  {
        IntStack newNode;
        if(stack.empty){
            stack.empty = false;
        } else {
            newNode = new IntStack{next : stack.next, value : stack.value};
            stack.next = newNode;
        }
        stack.value = newValue;
    }, pop : lambda (IntStack stack)->Int  {
        Int ret;
        ret = stack.value;
        if(stack.next == null){
          stack.empty = true;
          stack.value = 0;
        } else {
          stack.value = stack.next.value;
          stack.next = stack.next.next;
        }
        stack = stack.next;
        return ret;
    }};

intListUtils = new IntListUtils{
  newIntList : lambda (Int length)->IntList  {
    IntList ret;
    Int i;
    ret = new IntList{values : intStackUtils.newIntStack(), size : length};
    for(i = 0; i < length; i=i+1){
      intStackUtils.push(ret.values, 0);
    }
    return ret;
  }, 
  updateAt : lambda (IntList list, Int val, Int index)->Void  {
    IntStack curr;
    Int i;
    curr = list.values;
    for(i = 0; i < index; i=i+1){
      curr = curr.next;
    }
    curr.value = val;
  }, 
  getAt : lambda (IntList list, Int index)->Int  {
    IntStack curr;
    Int i;
    curr = list.values;
    for(i = 0; i < index; i=i+1){
      curr = curr.next;
    }
    return curr.value;
  }}; 
